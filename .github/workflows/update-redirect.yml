name: Update SonyLIV Redirect (5 min)

on:
  schedule:
    - cron: "*/5 * * * *"
  workflow_dispatch:

jobs:
  run:
    runs-on: ubuntu-latest

    env:
      # === Secrets (set these in GitHub repo Settings → Secrets and variables → Actions) ===
      CF_API_TOKEN:  ${{ secrets.CF_API_TOKEN }}
      CF_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
      CF_LIST_ID:    ${{ secrets.CF_LIST_ID }}    # Bulk URL Redirects list ID
      CF_ZONE_ID:    ${{ secrets.CF_ZONE_ID }}    # optional; only used for purge

      # === Edit these values for your use case ===
      PLAYLIST_URL: "https://raw.githubusercontent.com/drmlive/sliv-live-events/refs/heads/main/sonyliv.m3u"
      WANTED_TITLE: "title=\"sonyliv-Cricket\", Pakistan vs Bangladesh - Super Four - 25 Sep 2025 [HIN] - Asia Cup 2025"
      NEEDLES: "sonyliv-Cricket|Pakistan vs Bangladesh|Super Four|25 Sep 2025|Asia Cup 2025|[HIN]"
      # The fixed path your app already calls (must be orange-cloud proxied in Cloudflare DNS)
      SOURCE_URL: "https://smartrupeeguide.com/sonyliv"

    steps:
      - name: Preflight — show list meta (helps debug IDs & perms)
        run: |
          set -e
          echo "Account: ${CF_ACCOUNT_ID}"
          echo "List:    ${CF_LIST_ID}"
          curl -sS -H "Authorization: Bearer ${CF_API_TOKEN}" \
               -H "Content-Type: application/json" \
               "https://api.cloudflare.com/client/v4/accounts/${CF_ACCOUNT_ID}/rules/lists/${CF_LIST_ID}" \
               | sed 's/\\n/\n/g' || true

      - name: Fetch playlist
        run: |
          set -e
          curl -fsSL "$PLAYLIST_URL" -o playlist.m3u

      - name: Extract target .m3u8
        id: parse
        run: |
          set -e
          # 1) Prefer exact title match
          awk -v T="$WANTED_TITLE" '
            BEGIN{f=0}
            {
              L=$0
              if (index(tolower(L), tolower(T))>0) {f=1; next}
              if (f==1 && L !~ /^#/ && L ~ /^https?:\/\//) {print L; exit 0}
            }
          ' playlist.m3u > target.txt || true

          # 2) Soft fallback: all needles present on the tag line
          if [ ! -s target.txt ]; then
            awk -v NEEDLES="$NEEDLES" '
              BEGIN{f=0}
              {
                L=$0
                if (L ~ /^#/) {
                  ok=1
                  n=split(NEEDLES, arr, /\|/)
                  lo=tolower(L)
                  for (i=1;i<=n;i++) if (index(lo, tolower(arr[i]))==0) ok=0
                  if (ok==1) { f=1; next }
                }
                if (f==1 && L !~ /^#/ && L ~ /^https?:\/\//) { print L; exit 0 }
              }
            ' playlist.m3u > target.txt || true
          fi

          if [ ! -s target.txt ]; then
            echo "::error::No target .m3u8 found in playlist."
            exit 1
          fi

          echo "m3u8=$(cat target.txt)" >> "$GITHUB_OUTPUT"
          echo "Found target: $(cat target.txt)"

      - name: Update Bulk URL Redirect list (replace single item) — DEBUG
        env:
          TARGET_URL: ${{ steps.parse.outputs.m3u8 }}
        run: |
          set -euo pipefail

          # NOTE: status_code is required by Cloudflare (NOT "status")
          # https://developers.cloudflare.com/rules/url-forwarding/bulk-redirects/reference/parameters/
          cat > payload.json <<'EOF'
          [
            {
              "redirect": {
                "source_url": "__SOURCE__",
                "target_url": "__TARGET__",
                "status_code": 302,
                "preserve_query_string": true,
                "include_subdomains": false,
                "subpath_matching": false,
                "preserve_path_suffix": true
              }
            }
          ]
          EOF
          sed -i "s|__SOURCE__|${SOURCE_URL}|g" payload.json
          sed -i "s|__TARGET__|${TARGET_URL}|g" payload.json

          echo "=== PUT replace items in list ${CF_LIST_ID} ==="
          http_code=$(curl -sS -o resp.json -w "%{http_code}" \
            -X PUT \
            -H "Authorization: Bearer ${CF_API_TOKEN}" \
            -H "Content-Type: application/json" \
            --data @payload.json \
            "https://api.cloudflare.com/client/v4/accounts/${CF_ACCOUNT_ID}/rules/lists/${CF_LIST_ID}/items")

          echo "HTTP ${http_code}"
          echo "Response JSON:"
          cat resp.json | sed 's/\\n/\n/g' || true

          if [ "${http_code}" -lt 200 ] || [ "${http_code}" -ge 300 ]; then
            exit 1
          fi

      - name: Purge cache (optional)
        if: ${{ env.CF_ZONE_ID != '' }}
        run: |
          set -e
          http_code=$(curl -sS -o purge.json -w "%{http_code}" \
            -X POST \
            -H "Authorization: Bearer ${CF_API_TOKEN}" \
            -H "Content-Type: application/json" \
            --data '{"purge_everything":true}' \
            "https://api.cloudflare.com/client/v4/zones/${CF_ZONE_ID}/purge_cache")
          echo "Purge HTTP ${http_code}"
          cat purge.json || true
