name: Update SonyLIV Redirect (5 min)

on:
  schedule:
    - cron: "*/5 * * * *"
  workflow_dispatch:

jobs:
  run:
    runs-on: ubuntu-latest
    env:
      PLAYLIST_URL: "https://raw.githubusercontent.com/drmlive/sliv-live-events/refs/heads/main/sonyliv.m3u"
      WANTED_TITLE: "title=\"sonyliv-Cricket\", Pakistan vs Bangladesh - Super Four - 25 Sep 2025 [HIN] - Asia Cup 2025"
      NEEDLES: "sonyliv-Cricket|Pakistan vs Bangladesh|Super Four|25 Sep 2025|Asia Cup 2025|[HIN]"
      SOURCE_URL: "https://yourdomain.com/sonyliv"
      CF_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
      CF_API_TOKEN:  ${{ secrets.CF_API_TOKEN }}
      CF_ZONE_ID:    ${{ secrets.CF_ZONE_ID }}
      CF_LIST_ID:    ${{ secrets.CF_LIST_ID }}
    steps:
      - name: Fetch playlist
        run: |
          curl -fsSL "$PLAYLIST_URL" -o playlist.m3u

      - name: Extract target m3u8
        id: parse
        run: |
          set -e
          awk -v T="$WANTED_TITLE" '
            BEGIN{f=0}
            {
              if (index(tolower($0), tolower(T))>0) {f=1; next}
              if (f==1 && $0 !~ /^#/ && $0 ~ /^https?:\/\//) {print $0; exit 0}
            }
          ' playlist.m3u > target.txt || true

          if [ ! -s target.txt ]; then
            # Soft fallback: require all needles on the metadata line
            needles="$(echo "$NEEDLES" | tr '|' '\n')"
            awk -v need="$NEEDLES" '
              BEGIN{f=0}
              {
                l=tolower($0)
                if ($0 ~ /^#/) {
                  ok=1
                  n=split(need, arr, /\|/)
                  for (i=1;i<=n;i++){ if (index(l, tolower(arr[i]))==0) ok=0 }
                  if (ok==1){ f=1; next }
                }
                if (f==1 && $0 !~ /^#/ && $0 ~ /^https?:\/\//) {print $0; exit 0}
              }' playlist.m3u > target.txt || true
          fi

          if [ ! -s target.txt ]; then
            echo "No target found"; exit 1
          fi

          echo "m3u8=$(cat target.txt)" >> $GITHUB_OUTPUT

      - name: Update Bulk Redirect list (replace single item)
        env:
          TARGET_URL: ${{ steps.parse.outputs.m3u8 }}
        run: |
          cat > payload.json <<EOF
          [
            {
              "source_url": "${SOURCE_URL}",
              "target_url": "${TARGET_URL}",
              "status": 302,
              "include_subdomains": false,
              "preserve_query_string": true,
              "subpath_matching": false
            }
          ]
          EOF

          curl -fsSL -X PUT \
            -H "Authorization: Bearer ${CF_API_TOKEN}" \
            -H "Content-Type: application/json" \
            --data @payload.json \
            "https://api.cloudflare.com/client/v4/accounts/${CF_ACCOUNT_ID}/rules/lists/${CF_LIST_ID}/items"

      - name: (Optional) Purge cache
        run: |
          curl -fsSL -X POST \
            -H "Authorization: Bearer ${CF_API_TOKEN}" \
            -H "Content-Type: application/json" \
            --data '{"purge_everything":true}' \
            "https://api.cloudflare.com/client/v4/zones/${CF_ZONE_ID}/purge_cache" || true
